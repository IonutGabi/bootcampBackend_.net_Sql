// <auto-generated />
using System;
using AcademyManagerWeb.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademyManagerWeb.Migrations
{
    [DbContext(typeof(AcademyContext))]
    [Migration("20250424135752_AddedManyToManyRelationship")]
    partial class AddedManyToManyRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseName")
                        .IsUnique()
                        .HasDatabaseName("UX_Courses_CourseName");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", null, t =>
                        {
                            t.HasComment("Tabla para almacenar los cursos");
                        });
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SocialMediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles", null, t =>
                        {
                            t.HasComment("Tabla para almacenar los perfiles de los profesores");
                        });
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.HasKey("StudentId");

                    b.HasIndex("Name", "LastName")
                        .IsUnique()
                        .HasDatabaseName("UX_Students_NameLastName");

                    b.ToTable("Students", null, t =>
                        {
                            t.HasComment("Tabla para almacenar a los estudiantes");
                        });
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("Name", "LastName")
                        .IsUnique()
                        .HasDatabaseName("UX_Teachers_NameLastName");

                    b.ToTable("Teachers", null, t =>
                        {
                            t.HasComment("Tabla para almacenar los profesores que imparten los cursos");
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("CoursesCourseId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Course", b =>
                {
                    b.HasOne("AcademyManagerWeb.DataAccess.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Teacher", b =>
                {
                    b.HasOne("AcademyManagerWeb.DataAccess.Profile", "Profile")
                        .WithOne("Teacher")
                        .HasForeignKey("AcademyManagerWeb.DataAccess.Teacher", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("AcademyManagerWeb.DataAccess.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyManagerWeb.DataAccess.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Profile", b =>
                {
                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("AcademyManagerWeb.DataAccess.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
